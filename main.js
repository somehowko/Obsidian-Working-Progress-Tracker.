/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FocusTimerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  goal: 1e3,
  showTimer: false,
  focusedTime: 0,
  lastResetDate: "",
  showMainTimer: true,
  showCurrentTime: true,
  workingHourGoal: 8
};
var LOG_FILE_PATH = "working record.md";
var DATE_FORMAT = "YYYY-MM-DD";
var TIME_FORMAT = "HH:mm:ss";
var FocusTimerPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // --- Event Handlers ---
    this.handleWindowFocus = () => {
      this.isWindowFocused = true;
      console.log("Window focused");
      if (this.activeLeaf && this.activeLeaf.view instanceof import_obsidian.MarkdownView) {
        this.startFocusTimer();
      }
    };
    this.handleWindowBlur = () => {
      this.isWindowFocused = false;
      console.log("Window blurred");
      this.stopFocusTimer();
    };
    this.handleLeafChange = async (leaf) => {
      if (this.activeLeaf && this.activeLeaf.view instanceof import_obsidian.MarkdownView) {
        this.stopFocusTimer();
      }
      if (leaf && leaf.view instanceof import_obsidian.MarkdownView) {
        if (this.isWindowFocused) {
          this.startFocusTimer();
        }
      }
      this.activeLeaf = leaf;
      if (leaf && this.isPopOutWindow(leaf)) {
        this.addStatusBar(leaf);
      }
    };
    this.handleEditorChange = async (editor, view) => {
      if (this.isWindowFocused && this.isPopOutWindow(view.leaf)) {
        this.startFocusTimer();
      }
      await this.updateDailyLog();
    };
  }
  async onload() {
    console.log("Loading Focus Timer Plugin");
    await this.loadSettings();
    this.statusBarItem = this.addStatusBarItem();
    this.updateStatusBar();
    this.debouncePopOutUpdate = (0, import_obsidian.debounce)(this.updatePopOutStatusBar, 250, true);
    this.registerInterval(
      window.setInterval(() => {
        if (this.isWindowFocused && this.lastFocusTime) {
          this.updateFocusedTime();
          this.updateStatusBar();
          this.saveSettings();
        }
      }, 1e3)
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", this.handleLeafChange.bind(this))
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", this.debounceUpdate.bind(this))
    );
    this.app.workspace.onLayoutReady(() => {
      var _a;
      this.activeLeaf = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.leaf;
      if (this.activeLeaf) {
        this.startFocusTimer();
      }
      this.handleLeafChange(this.activeLeaf);
    });
    window.addEventListener("focus", this.handleWindowFocus);
    window.addEventListener("blur", this.handleWindowBlur);
    this.addSettingTab(new FocusTimerSettingsTab(this.app, this));
  }
  async onunload() {
    await this.updateDailyLog();
    await this.saveSettings();
    window.removeEventListener("focus", this.handleWindowFocus);
    window.removeEventListener("blur", this.handleWindowBlur);
  }
  // --- Timer Functions ---
  startFocusTimer() {
    if (!this.lastFocusTime) {
      this.lastFocusTime = Date.now();
      console.log("Focus timer STARTED");
    }
  }
  stopFocusTimer() {
    if (this.lastFocusTime) {
      this.updateFocusedTime();
      this.lastFocusTime = null;
      console.log("Focus timer STOPPED. Total:", this.settings.focusedTime);
      this.saveSettings();
    }
  }
  updateFocusedTime() {
    if (this.lastFocusTime) {
      const elapsed = Date.now() - this.lastFocusTime;
      this.settings.focusedTime += elapsed;
      this.lastFocusTime = Date.now();
    }
  }
  // --- Status Bar Updates ---
  updateStatusBar() {
    let statusBarText = "";
    if (this.settings.showMainTimer) {
      const formattedTime = this.formatTime(this.settings.focusedTime);
      statusBarText += `Focused: ${formattedTime} `;
    }
    const workingHourGoalProgress = (this.settings.focusedTime / (this.settings.workingHourGoal * 60 * 60 * 1e3) * 100).toFixed(2);
    statusBarText += `| WH Goal: ${workingHourGoalProgress}% `;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const charNum = activeView.editor.getValue().length;
      const charGoalProgress = this.settings.goal > 0 ? (charNum / this.settings.goal * 100).toFixed(2) : "0.00";
      statusBarText += `| Char Goal: ${charGoalProgress}%`;
    } else {
      statusBarText += `| Char Goal: N/A`;
    }
    if (this.settings.showCurrentTime) {
      const currentTime = (0, import_obsidian.moment)().format(TIME_FORMAT);
      statusBarText += ` | ${currentTime}`;
    }
    this.statusBarItem.setText(statusBarText.trim());
  }
  updatePopOutStatusBar(leaf) {
    const editor = leaf.view.editor;
    if (!editor) {
      return;
    }
    const content = editor.getValue();
    const words = content.split(/\s+/).filter((word) => word.length > 0).length;
    const lineNum = editor.getCursor().line + 1;
    const chNum = content.length;
    const charGoalProgress = this.settings.goal > 0 ? (chNum / this.settings.goal * 100).toFixed(2) : "0.00";
    const workingHourGoalProgress = (this.settings.focusedTime / (this.settings.workingHourGoal * 60 * 60 * 1e3) * 100).toFixed(2);
    const formattedTime = this.formatTime(this.settings.focusedTime);
    if (leaf.popOutStatusBar) {
      leaf.popOutStatusBar.wordCountItem.textContent = `${words} words`;
      leaf.popOutStatusBar.lineCountItem.textContent = `Ln ${lineNum}, Col ${chNum}`;
      leaf.popOutStatusBar.charCountItem.textContent = `${chNum} chars`;
      leaf.popOutStatusBar.goalProgressItem.textContent = `Char Goal: ${charGoalProgress}%`;
      leaf.popOutStatusBar.workingHourGoalProgressItem.textContent = `WH Goal: ${workingHourGoalProgress}%`;
      if (this.settings.showTimer) {
        leaf.popOutStatusBar.timerItem.textContent = `Focused: ${formattedTime}`;
      } else {
        leaf.popOutStatusBar.timerItem.textContent = "";
      }
    }
  }
  // --- Helper Functions ---
  formatTime(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1e3);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor(totalSeconds % 3600 / 60);
    const seconds = totalSeconds % 60;
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}:${String(
      seconds
    ).padStart(2, "0")}`;
  }
  isPopOutWindow(leaf) {
    var _a;
    if (!leaf || !((_a = leaf.view) == null ? void 0 : _a.getViewType())) {
      return false;
    }
    return leaf.view.containerEl.ownerDocument !== document;
  }
  // --- Daily Logging ---
  async updateDailyLog() {
    const today = (0, import_obsidian.moment)().format(DATE_FORMAT);
    if (this.settings.lastResetDate !== today) {
      await this.logToFile(this.settings.lastResetDate, this.settings.focusedTime);
      this.settings.focusedTime = 0;
      this.settings.lastResetDate = today;
    } else {
      await this.logToFile(today, this.settings.focusedTime);
    }
  }
  async logToFile(date, focusedTime) {
    const filePath = LOG_FILE_PATH;
    let fileContent = "";
    let fileExists = false;
    try {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        fileContent = await this.app.vault.read(file);
        fileExists = true;
      }
    } catch (error) {
      fileExists = false;
    }
    const formattedTime = this.formatTime(focusedTime);
    const newData = `| ${date} | ${formattedTime} |
`;
    const tableHeader = "| Date       | Focused Time |\n| ---------- | ------------ |\n";
    if (fileExists) {
      const lines = fileContent.split("\n");
      let dateRowIndex = -1;
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith(`| ${date} |`)) {
          dateRowIndex = i;
          break;
        }
      }
      if (dateRowIndex > -1) {
        lines[dateRowIndex] = newData.trim();
        fileContent = lines.join("\n");
      } else {
        if (fileContent.includes(tableHeader)) {
          fileContent = fileContent.replace(tableHeader, tableHeader + newData);
        } else {
          fileContent = tableHeader + newData + fileContent;
        }
      }
    } else {
      fileContent = tableHeader + newData;
    }
    try {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (fileExists && file instanceof import_obsidian.TFile) {
        await this.app.vault.modify(file, fileContent);
      } else {
        await this.app.vault.create(filePath, fileContent);
      }
    } catch (error) {
      console.error("Error writing to log file:", error);
      new import_obsidian.Notice(`Failed to update daily log. ${error.message}`);
      return;
    }
  }
  // --- Settings ---
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.debounceUpdate = (0, import_obsidian.debounce)(this.handleEditorChange, 500, true);
    const today = (0, import_obsidian.moment)().format(DATE_FORMAT);
    if (this.settings.lastResetDate !== today) {
      await this.updateDailyLog();
      this.settings.focusedTime = 0;
      this.settings.lastResetDate = today;
      await this.saveSettings();
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  addStatusBar(leaf) {
    const container = leaf.containerEl;
    if (container.querySelector(".pop-out-status-bar")) {
      return;
    }
    const statusBar = container.createDiv("pop-out-status-bar");
    const wordCountItem = statusBar.createDiv("status-bar-item");
    const lineCountItem = statusBar.createDiv("status-bar-item");
    const charCountItem = statusBar.createDiv("status-bar-item");
    const goalProgressItem = statusBar.createDiv("status-bar-item");
    const workingHourGoalProgressItem = statusBar.createDiv("status-bar-item");
    const timerItem = statusBar.createDiv("status-bar-item");
    statusBar.style.opacity = "0";
    statusBar.style.transition = "opacity 0.2s ease-in-out";
    statusBar.onmouseenter = () => {
      statusBar.style.opacity = "1";
    };
    statusBar.onmouseleave = () => {
      statusBar.style.opacity = "0";
    };
    this.updatePopOutStatusBar(leaf);
    const updateEvent = this.app.workspace.on("editor-change", (editor) => {
      if (editor === leaf.view.editor) {
        this.debouncePopOutUpdate(leaf);
      }
    });
    const cursorActivityEvent = this.app.workspace.on("editor-cursor-activity", (editor) => {
      if (editor === leaf.view.editor) {
        this.debouncePopOutUpdate(leaf);
      }
    });
    leaf.popOutStatusBar = {
      statusBar,
      wordCountItem,
      lineCountItem,
      charCountItem,
      goalProgressItem,
      workingHourGoalProgressItem,
      timerItem,
      updateEvent,
      // Store the event reference
      cursorActivityEvent
      // Store the event reference
    };
    const titlebar = container.querySelector(".view-header");
    if (titlebar) {
      titlebar.insertAdjacentElement("afterend", statusBar);
    } else {
      console.error("Pop-out window title bar not found!");
    }
    statusBar.classList.add("status-bar");
    wordCountItem.classList.add("status-bar-item");
    lineCountItem.classList.add("status-bar-item");
    charCountItem.classList.add("status-bar-item");
    goalProgressItem.classList.add("status-bar-item");
    workingHourGoalProgressItem.classList.add("status-bar-item");
    timerItem.classList.add("status-bar-item");
    this.registerEvent(updateEvent);
    this.registerEvent(cursorActivityEvent);
    leaf.view.on("destroy", () => {
      if (leaf.popOutStatusBar) {
        console.log("Cleaning up pop-out status bar");
        this.app.workspace.offref(leaf.popOutStatusBar.updateEvent);
        this.app.workspace.offref(leaf.popOutStatusBar.cursorActivityEvent);
        leaf.popOutStatusBar.statusBar.remove();
        leaf.popOutStatusBar = void 0;
      }
    });
  }
};
var FocusTimerSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Focus Timer Settings" });
    new import_obsidian.Setting(containerEl).setName("Character Count Goal").setDesc("Set your character count goal for pop-out windows.").addText(
      (text) => text.setPlaceholder("Enter your goal").setValue(this.plugin.settings.goal.toString()).onChange(async (value) => {
        this.plugin.settings.goal = parseInt(value, 10) || DEFAULT_SETTINGS.goal;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show Timer in Pop-out Windows").setDesc("Show the focused timer in pop-out window status bars.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showTimer).onChange(async (value) => {
        this.plugin.settings.showTimer = value;
        await this.plugin.saveSettings();
        this.plugin.app.workspace.getLeavesOfType("markdown").forEach((leaf) => {
          if (this.plugin.isPopOutWindow(leaf)) {
            this.plugin.updatePopOutStatusBar(leaf);
          }
        });
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show Main Status Bar Timer").setDesc("Show or hide the timer in the main status bar.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showMainTimer).onChange(async (value) => {
        this.plugin.settings.showMainTimer = value;
        this.plugin.updateStatusBar();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show Current Time").setDesc("Show or hide the current time in the main status bar.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showCurrentTime).onChange(async (value) => {
        this.plugin.settings.showCurrentTime = value;
        this.plugin.updateStatusBar();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Working Hour Goal").setDesc("Set your daily working hour goal.").addText(
      (text) => text.setPlaceholder("Enter your goal (hours)").setValue(this.plugin.settings.workingHourGoal.toString()).onChange(async (value) => {
        const parsedValue = parseFloat(value);
        this.plugin.settings.workingHourGoal = isNaN(parsedValue) ? DEFAULT_SETTINGS.workingHourGoal : parsedValue;
        await this.plugin.saveSettings();
        this.plugin.updateStatusBar();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
